#+TITLE: Login and Signup
#+DATE: [2019-02-06 Wed]
#+AUTHOR: Philipp Uhl

* Frontend

** Redux Interface

This component provides the states
- ~token~ :: The Basic-auth token for the API
- ~id~ :: The users ID
- ~name~ :: The users name
- ~email~ :: The users Email-Address

In order to logout a user simply delete the complete store and return
to the Login screen.

** Screens

This component provides the screens
- ~Apparts.Login~ :: A Login-page for login with username and password
- ~Apparts.Signup~ :: A Signup-page for username, password, name

** Configuration

The configuration option for this component are:
- ~screenAfterLogin {string}~ :: The screen to maneuver to after
     successful login
- ~screenAfterSignup {string}~ :: The screen to maneuver to after
     successful signup

For using the =apparts-config= module with react native it is
necessary to use the =babel-plugin-module-resolver= module in order to
replace the =apparts-config= module project wide with a short file
that implements the function ~get~ like this:

#+BEGIN_SRC js
module.exports.get = (config) => {
  return {
    // my configs
    login: {
      screenAfterLogin: 'myApp.main',
      screenAfterSignup: 'myApp.welcome'
    }
  }[config];
};
#+END_SRC

The respective babel configuration in the file =babel.config.js= would
be:

#+BEGIN_SRC js
module.exports = {
  // ...
  "plugins": [
    ["module-resolver", {
      "alias": {
        "apparts-config": "./src/config.js",
        "apparts-react-navigation": "./node_modules/apparts-react-navigation"
      }
    }]
  ]
};
#+END_SRC

** Usage

1. To register the screens include the package =apparts-login= in your
   =src/screens/index.js= like this:

   #+BEGIN_SRC js
   export { Login, Signup } from 'apparts-login';
   #+END_SRC

2. To use the default language files import them like this in your
   =src/lang/index.js=:

   #+BEGIN_SRC js
   import * as AppartsLogin from 'apparts-login';
   const lang = {};
   // ...
   Object.assign(lang, AppartsLogin.lang);
   // ...
   export default lang;
   #+END_SRC

   You can partly overwrite the provided ~lang~-Object if necessary.

3. In order to start the application with a login/signup-screen:

   #+BEGIN_SRC js
   import { startApp } from './src/utils/navigation';
   // get Store s
   startApp({ startScreen: 'Apparts.Signup', store: s});
   #+END_SRC

4. It might be necessary to limit the directories from which modules
   can be imported to only the root level of =node_modules= by putting
   the following into your =webpack= configuration

   #+BEGIN_SRC js
     resolve: {
       // ...
       alias: {
         // ...
         'apparts-react-navigation': join(__dirname, './node_modules/apparts-react-navigation')
       }
     }
   #+END_SRC

* Backend

...
